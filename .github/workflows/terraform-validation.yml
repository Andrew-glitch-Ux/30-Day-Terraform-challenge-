name: Terraform Validation

on:
  pull_request:
    branches:
      - 'week*'
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.tf'
      - '**/*.tfvars'

jobs:
  terraform-validation:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Initialize Results
        run: |
          echo "FILE_STRUCTURE_RESULTS=" >> $GITHUB_ENV
          echo "SECURITY_RESULTS=" >> $GITHUB_ENV
          echo "FORMAT_RESULTS=" >> $GITHUB_ENV
          echo "VALIDATION_RESULTS=" >> $GITHUB_ENV
          echo "HAS_ISSUES=false" >> $GITHUB_ENV

      - name: File Structure Check
        run: |
          for dir in Day*/Submissions/*/terraform/*/; do
            if [ -d "$dir" ]; then
              required_files=("main.tf")
              for file in "${required_files[@]}"; do
                if [ ! -f "$dir/$file" ]; then
                  echo "❌ Missing required file: $dir/$file"
                  echo "HAS_ISSUES=true" >> $GITHUB_ENV
                  exit 1
                fi
              done
            fi
          done
          echo "✅ File structure check passed."

      - name: Terraform Format Check
        run: |
          for dir in $(find . -name "*.tf" -exec dirname {} \; | sort -u); do
            terraform fmt -check -recursive "$dir"
            if [ $? -ne 0 ]; then
              echo "❌ Formatting issues in $dir"
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              exit 1
            fi
          done
          echo "✅ Formatting check passed."

      - name: Initialize and Validate Terraform
        run: |
          for dir in $(find . -name "*.tf" -exec dirname {} \; | sort -u); do
            cd "$dir"
            terraform init -backend=false
            terraform validate
            if [ $? -ne 0 ]; then
              echo "❌ Terraform validation failed in $dir"
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              exit 1
            fi
            cd - > /dev/null
          done
          echo "✅ Terraform validation passed."

      - name: Security Checks
        run: |
          for dir in $(find . -name "*.tf" -exec dirname {} \; | sort -u); do
            cd "$dir"
            if grep -qE "access_key|secret_key|password|token" *.tf; then
              echo "❌ Hardcoded credentials found in $dir"
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              exit 1
            fi
            if grep -q "0.0.0.0/0" *.tf; then
              echo "⚠️ Unrestricted access (0.0.0.0/0) detected in $dir"
            fi
            if ! grep -q "tags *= *{" *.tf; then
              echo "❌ Missing resource tags in $dir"
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              exit 1
            fi
            cd - > /dev/null
          done
          echo "✅ Security checks passed."

      - name: Post Results as Comment
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const hasIssues = process.env.HAS_ISSUES === 'true';
            const summary = `
## 📋 Terraform Validation Summary

### Status: ${hasIssues ? "⚠️ Changes Required" : "✅ All Checks Passed"}

- **File Structure Check**: ${hasIssues ? "❌ Issues found" : "✅ Passed"}
- **Format Check**: ${hasIssues ? "❌ Issues found" : "✅ Passed"}
- **Validation Check**: ${hasIssues ? "❌ Issues found" : "✅ Passed"}
- **Security Check**: ${hasIssues ? "❌ Issues found" : "✅ Passed"}

Please ensure all requirements are met before merging.
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Fail if Issues Detected
        if: always()
        run: |
          if [ "$HAS_ISSUES" = "true" ]; then
            echo "❌ Validation failed. Please address the issues before merging."
            exit 1
          fi

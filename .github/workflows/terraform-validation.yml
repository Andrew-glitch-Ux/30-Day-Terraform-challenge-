name: Terraform Validation

on:
  pull_request:
    branches:
      - 'week*'
    types: [opened, synchronize, reopened]

jobs:
  terraform-validation:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Initialize validation results
        run: |
          echo "VALIDATION_RESULTS=" >> $GITHUB_ENV
          echo "VALIDATION_SUMMARY=" >> $GITHUB_ENV
          echo "HAS_ISSUES=false" >> $GITHUB_ENV

      - name: Check file structure
        id: file_structure
        continue-on-error: true
        run: |
          FILES_CHECKED=0
          INVALID_FILES=0
          
          for tf_file in $(find . -name "*.tf" -type f); do
            ((FILES_CHECKED++))
            if [[ ! $tf_file =~ /Day[0-9]+/Submissions/[^/]+/.*\.tf$ ]]; then
              ((INVALID_FILES++))
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "VALIDATION_RESULTS<<EOF" >> $GITHUB_ENV
              echo "### ❌ File Structure Check Failed" >> $GITHUB_ENV
              echo "- File: \`$tf_file\`" >> $GITHUB_ENV
              echo "- Required format: \`Day<number>/Submissions/<username>/*.tf\`" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
          done
          
          if [ $INVALID_FILES -eq 0 ]; then
            echo "VALIDATION_RESULTS<<EOF" >> $GITHUB_ENV
            echo "### ✅ File Structure Check Passed" >> $GITHUB_ENV
            echo "- All $FILES_CHECKED Terraform files follow the correct structure" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Terraform Format Check
        id: fmt
        continue-on-error: true
        run: |
          for dir in $(find . -name "*.tf" -type f -exec dirname {} \; | sort -u); do
            if ! terraform fmt -check -recursive -diff "$dir" > fmt_output 2>&1; then
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "VALIDATION_RESULTS<<EOF" >> $GITHUB_ENV
              echo "### ❌ Terraform Format Check Failed" >> $GITHUB_ENV
              echo "Directory: \`$dir\`" >> $GITHUB_ENV
              echo "The following formatting issues were found:" >> $GITHUB_ENV
              echo "\`\`\`diff" >> $GITHUB_ENV
              cat fmt_output >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "**Action Required:** Run \`terraform fmt\` to fix these formatting issues." >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
          done

      - name: Security Check
        id: security
        continue-on-error: true
        run: |
          for tf_file in $(find . -name "*.tf" -type f); do
            # Check for hardcoded credentials
            if grep -n -i "access_key\|secret_key\|password\|token" "$tf_file"; then
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "VALIDATION_RESULTS<<EOF" >> $GITHUB_ENV
              echo "### ❌ Security Check Failed: Hardcoded Credentials" >> $GITHUB_ENV
              echo "File: \`$tf_file\`" >> $GITHUB_ENV
              echo "The following lines contain potential credentials:" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              grep -n -i "access_key\|secret_key\|password\|token" "$tf_file" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "**Action Required:** Replace hardcoded credentials with variables or environment variables." >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
            
            # Check for public access
            if grep -n -i "acl.*=.*public" "$tf_file"; then
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "VALIDATION_RESULTS<<EOF" >> $GITHUB_ENV
              echo "### ⚠️ Security Check Warning: Public Access" >> $GITHUB_ENV
              echo "File: \`$tf_file\`" >> $GITHUB_ENV
              echo "The following lines configure public access:" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              grep -n -i "acl.*=.*public" "$tf_file" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "**Note:** Ensure public access is intentional and documented." >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
            
            # Check for required tags
            if ! grep -i "tags.*=.*{" "$tf_file" > /dev/null; then
              echo "VALIDATION_RESULTS<<EOF" >> $GITHUB_ENV
              echo "### ℹ️ Best Practice Suggestion" >> $GITHUB_ENV
              echo "File: \`$tf_file\`" >> $GITHUB_ENV
              echo "Consider adding resource tags for better management. Example:" >> $GITHUB_ENV
              echo "\`\`\`hcl" >> $GITHUB_ENV
              echo "tags = {" >> $GITHUB_ENV
              echo "  Environment = \"dev\"" >> $GITHUB_ENV
              echo "  Project     = \"TerraformChallenge\"" >> $GITHUB_ENV
              echo "  Owner       = \"username\"" >> $GITHUB_ENV
              echo "}" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
          done

      - name: Terraform Init and Validate
        id: validate
        continue-on-error: true
        run: |
          for dir in $(find . -name "*.tf" -type f -exec dirname {} \; | sort -u); do
            cd $dir
            
            # Run terraform init
            if ! terraform init -backend=false > init_output 2>&1; then
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "VALIDATION_RESULTS<<EOF" >> $GITHUB_ENV
              echo "### ❌ Terraform Init Failed" >> $GITHUB_ENV
              echo "Directory: \`$dir\`" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              cat init_output >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
            
            # Run terraform validate with detailed error output
            if ! terraform validate; then
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "VALIDATION_RESULTS<<EOF" >> $GITHUB_ENV
              echo "### ❌ Terraform Validation Failed" >> $GITHUB_ENV
              echo "Directory: \`$dir\`" >> $GITHUB_ENV
              echo "The following validation errors were found:" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              terraform validate 2>&1 >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
            cd - > /dev/null
          done

      - name: Generate Validation Summary
        run: |
          if [ "$HAS_ISSUES" = "true" ]; then
            echo "VALIDATION_SUMMARY<<EOF" >> $GITHUB_ENV
            echo "## 📋 Terraform Validation Summary" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "### Status: Changes Required ⚠️" >> $GITHUB_ENV
            echo "The following issues were found in your Terraform configuration:" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "VALIDATION_SUMMARY<<EOF" >> $GITHUB_ENV
            echo "## 📋 Terraform Validation Summary" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "### Status: All Checks Passed ✅" >> $GITHUB_ENV
            echo "Your Terraform configuration looks good! All validation checks have passed." >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Post Validation Results
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const summary = process.env.VALIDATION_SUMMARY;
            const results = process.env.VALIDATION_RESULTS;
            
            let comment = summary + '\n\n';
            if (results) {
              comment += '## Detailed Results\n\n' + results;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 